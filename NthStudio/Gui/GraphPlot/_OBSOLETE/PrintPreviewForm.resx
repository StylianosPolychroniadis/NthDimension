<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAGBgAAAEAIACICQAAFgAAACgAAAAYAAAAMAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAg9aAAIPWgAC
        D1oAAAAAAAIPLQACDy0AAg8tAAAAAAACDy0AAg8tAAIPWgAAAAAAAg8tAAIPLQACDy0AAg9aAAIPWgAA
        AAAAAg8tAAIPLQACD1oAAAAAAAIPLQACDy0AAg+zAAAAAAACD1oAAg8tAAIPWgACD1oAAg9aAAAAAAAC
        D1oAAg9aAAIPLQACDy0AAg9aAAIPWgACD1oAAg8tAAIPWgACD1oAAg+GAAIPWgACDy0AAg9aAAIPWgAC
        D1oAAg+zAAAAAAACDy0AAg9aAAIPWgACD1oAAg+GAAIPLQACD1oAAg+GAAIPhgACD1oAAg+GAAIPWgAC
        D1oAAg+GAAIPWgACDy0AAg+GAAIPWgACDy0AAg9aAAIPhgACD1oAAg+zAAAAAAACD1oAAg8tAAIPLQAC
        D1oAAg9aAAIPWgACDy0AAg8tAAIPWgAAAAAAAg9aAAIPWgAAAAAAAg9aAAIPWgAAAAAAAg8tAAIPWgAC
        D1oAAAAAAAIPWgACD1oAAg9aAAIPWgACD1oAAAAAAAIPLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAg8tAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbMWgAGzNkABsxaAAAAAAAAAAAAAAAAAAAAAAAG
        zMYABszGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAbMWgAGzP8ABsxaAAAAAAAAAAAAAAAAAAAAAAAGzNkABszZAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbMWgAGzP8ABsxaAAAAAAAA
        AAAAAAAAAAAAAAAGzNkABszZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAbMWgAGzP8ABsxaAAAAAAAAAAAAAAAAAAAAAAAGzNkABszZAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbMWgAG
        zP8ABsxaAAAAAAAAAAAAAAAAAAAAAAAGzNkABszZAAAAAAACDy0AAg/ZAAIPswAAAAAAAg+zAAAAAAAA
        AAAAAg9aAAIPxgAAAAAAAAAAAAAAAAAAAAAAAAAAAAbMWgAGzP8ABsxaAAAAAAAAAAAAAAAAAAAAAAAG
        zNkABszZAAAAAAACD1oAAg/ZAAAAAAAAAAAAAg+zAAAAAAAAAAAAAg9aAAIP2QAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAbMWgAGzP8ABsxaAAAAAAAAAAAAAAAAAAAAAAAGzNkABszZAAAAAAACD1oAAg/ZAAAAAAAA
        AAAAAg+zAAAAAAAAAAAAAg9aAAIP2QAAAAAAAAAAAAAAAAAAAAAAAAAAAAbMWgAGzP8ABsyZAAAAAAAA
        AAAAAAAAAAAAAAAGzNkABszZAAAAAAACD1oAAg/ZAAAAAAAAAAAAAg+zAAAAAAAAAAAAAg9aAAIP2QAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAbMWgAGzP8ABszsAAbMWgAAAAAAAAAAAAbMmQAGzP8ABsyZAAAAAAAC
        D1oAAg/ZAAAAAAAAAAAAAg/ZAAIPmQAAAAAAAg9aAAIP2QAAAAAAAAAAAAAAAAAAAAAAAAAAAAbMWgAG
        zOwABsxaAAbM7AAGzNkABszZAAbM/wAGzNkABswtAAAAAAACD9kAAg//AAIPswAAAAAAAg/GAAIPmQAC
        D7MAAg/GAAIPLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAbMLQAGzFoAAAAAAAbMLQAGzFoABsxaAAbMWgAA
        AAAAAAAAAAAAAAACD1oAAg/ZAAAAAAAAAAAAAg+zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDy0AAg/GAAAAAAAA
        AAAAAg+zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAg9aAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///9B////Qf///0EREERBQQAAQUAAAEFAEkRBF//fQf//
        /0GPP/9Bjz//QY8//0GPP/9BjyLPQY8mz0GPJs9BjybPQYYmT0GAIg9BkOb/Qf/m/0H//v9B////Qf//
        /0E=
</value>
  </data>
</root>