#variables
uniform int in_no_lights;

const int no_lights = 10;

uniform sampler2D shadowTexture;
uniform sampler2D sunShadowTexture;
uniform sampler2D sunInnerShadowTexture;

uniform float shadow_quality;

uniform bool use_spec;
uniform bool spec_a_base;
uniform bool spec_a_normal;
uniform vec3 in_speccolor;
uniform float in_specexp;

struct Light
{
    bool actve;
	bool textre;
    vec3 position;
	vec3 direction;
    vec3 color;
	mat4 view_matrix;
};

struct SunLight
{
    bool actve;
	vec3 direction;
    vec3 color;
	mat4 view_matrix;
	mat4 inner_view_matrix;
};

uniform Light lightStructs[no_lights];
uniform SunLight sunLightStruct;

in vec4 v_s_map_pos[no_lights];

in vec4 v_sun_map_pos;
in vec4 v_inner_sun_map_pos;

uniform float sunradius = 0.001;	// warning: some drivers do not support uniform initialization

#functions
float getspec(vec3 refn,int i)
{	
	vec3 light_vec = normalize(lightStructs[i].position - g_pos.xyz);
	vec3 eye_dir = refn;
	
	float specular = clamp(dot(light_vec, eye_dir), 0.0, 1.0);
	
	float final_spec = pow(specular,in_specexp);
	
	return final_spec;
	
}

float getSunSpec(vec3 refn)
{	
	vec3 light_vec = -sunLightStruct.direction;
	vec3 eye_dir = refn;
	
	float specular = clamp(dot(light_vec, eye_dir), 0.0, 1.0);
	
	float final_spec = pow(specular,in_specexp);
	
	return final_spec;
	
}


float shadowSample(vec3 coord, float bias){
	float distanceFromLight = texture(shadowTexture ,coord.st).a + bias;	
	return distanceFromLight < coord.z ? 0.0 : 1.0 ;
}

float sunShadowSample(vec3 coord, float bias){
	float distanceFromLight = texture(sunShadowTexture ,coord.st).z + bias;	
	return distanceFromLight < coord.z ? 0.0 : 1.0 ;
}

float sunInnerShadowSample(vec3 coord, float bias){
	float distanceFromLight = texture(sunInnerShadowTexture ,coord.st).z + bias;	
	return distanceFromLight < coord.z ? 0.0 : 1.0 ;
}

vec3 getlight(vec3 N,int number,vec2 rnd){	
		vec3 light_final = vec3(0.0,0.0,0.0);
		
		vec4 shadowCoordinateWdivide = v_s_map_pos[number] / v_s_map_pos[number].w ;

		if(0.0 < shadowCoordinateWdivide.x 
		&& 1.0 > shadowCoordinateWdivide.x 
		&& 0.0 < shadowCoordinateWdivide.y 
		&& 1.0 > shadowCoordinateWdivide.y 
		&& shadowCoordinateWdivide.z > 0.0
		&& shadowCoordinateWdivide.z < 1.0)
		{
			float radius = 0.002;
			
			float brightness = 10.0;

			float ang_hardness = 10.0;
			float ang_limit = 0.7;
			float lenth_mult = 0.2;
			
			vec3 light_angular;
			light_angular = vec3(1.0,1.0,1.0)*clamp((1-length(shadowCoordinateWdivide.xy*2.0-1.0))*10.0,0.0,1.0);
		
			shadowCoordinateWdivide.x = (shadowCoordinateWdivide.x + number) / float(in_no_lights);
			
			vec3 light_vec = normalize(lightStructs[number].position-g_pos.xyz);
			vec3 light_dir = normalize(lightStructs[number].direction);
			
			float angle = dot(light_vec, N);
			float light_diffuse = clamp(angle, 0.0, 1.0);
			
			if(light_diffuse < 0.01)
				return vec3(0.0,0.0,0.0);

			if(lightStructs[number].textre == true)
			{
				light_angular = texture(shadowTexture ,shadowCoordinateWdivide.st).rgb;
			}

			
			if(light_angular.r < 0.01 && light_angular.g < 0.01 && light_angular.b < 0.01)
				return vec3(0.0,0.0,0.0);

			float shadow = 0.0;
			
			float distanceFromLight = texture(shadowTexture ,shadowCoordinateWdivide.st).z;
			float light_distance = pow(1-shadowCoordinateWdivide.z,1.3);
			
			shadowCoordinateWdivide.xy += rnd*vec2(radius/float(in_no_lights),radius)*0.7;
			float bias = 0.004/clamp(angle,0.02,1.0);
			
			if(shadow_quality > 0.1){
				float x,y;
				for (y = -shadow_quality ; y <=shadow_quality ; y+=1.0)
					for (x = -shadow_quality ; x <=shadow_quality ; x+=1.0)
						shadow += shadowSample(shadowCoordinateWdivide.xyz+vec3(x*radius/float(in_no_lights),y*radius,0),bias);
							
				shadow /= pow(shadow_quality*2.0+1.0,2.0);
			} else {
				shadow = shadowSample(shadowCoordinateWdivide.xyz,bias);
			}

			light_final += shadow*light_angular*light_diffuse*light_distance*brightness*lightStructs[number].color;

		}
	
	return light_final;
}

vec3 getSunLight(vec3 N, vec2 rnd){
	sunradius = 0.001;
	vec4 shadowCoordinateWdivide = v_inner_sun_map_pos / v_inner_sun_map_pos.w;
	float shadow = 1.0;

	float sunShadowQuality = 1.0;
	
	float angle = dot(-sunLightStruct.direction, N);
	float light_diffuse = clamp(angle, 0.0, 1.0);
	
	if(light_diffuse < 0.01)
		return vec3(0.0,0.0,0.0);

	if(0.0 < shadowCoordinateWdivide.x 
	&& 1.0 > shadowCoordinateWdivide.x 
	&& 0.0 < shadowCoordinateWdivide.y 
	&& 1.0 > shadowCoordinateWdivide.y 
	&& shadowCoordinateWdivide.z > 0.0
	&& shadowCoordinateWdivide.z < 1.0)
	{		
		shadow = 0.0;

		shadowCoordinateWdivide.xy += rnd*vec2(1,1)*sunradius*0.7;
		
		float bias = 0.001/clamp(angle,0.01,1.0);
		
		if(sunShadowQuality > 0.1){
			float x,y;
			for (y = -sunShadowQuality ; y <=sunShadowQuality ; y+=1.0)
				for (x = -sunShadowQuality ; x <=sunShadowQuality ; x+=1.0)
					shadow += sunInnerShadowSample(shadowCoordinateWdivide.xyz+vec3(x*sunradius,y*sunradius,0.0),bias);
								
			shadow /= pow(sunShadowQuality*2.0+1.0,2.0);
		} else {
			shadow = sunInnerShadowSample(shadowCoordinateWdivide.xyz,bias);
		}

		return sunLightStruct.color * shadow * light_diffuse;
	} 
	else
	{
		sunShadowQuality -= 0.5;
	
		shadowCoordinateWdivide = v_sun_map_pos / v_sun_map_pos.w;
		
		float bias = 0.002/clamp(angle,0.01,1.0);
		
		if(0.0 < shadowCoordinateWdivide.x 
		&& 1.0 > shadowCoordinateWdivide.x 
		&& 0.0 < shadowCoordinateWdivide.y 
		&& 1.0 > shadowCoordinateWdivide.y 
		&& shadowCoordinateWdivide.z > 0.0
		&& shadowCoordinateWdivide.z < 1.0)
		{		
			shadow = 0.0;

			shadowCoordinateWdivide.xy += rnd*vec2(1.0,1.0)*sunradius*0.7;
			
			if(sunShadowQuality > 0.1){
				float x,y;
				for (y = -sunShadowQuality ; y <=sunShadowQuality ; y+=1.0)
					for (x = -sunShadowQuality ; x <=sunShadowQuality ; x+=1.0)
						shadow += sunShadowSample(shadowCoordinateWdivide.xyz+vec3(x*sunradius,y*sunradius,0.0),bias);
									
				shadow /= pow(sunShadowQuality*2.0+1.0,2.0);
			} else {
				shadow = sunShadowSample(shadowCoordinateWdivide.xyz,bias);
			}
			
			//return sunLightStruct.color*sunShadowSample(shadowCoordinateWdivide.xyz);
			
		}

		return sunLightStruct.color * shadow * light_diffuse;
	}
}
#code
	vec3 light;
		
	vec3 all_lights = in_lightambient;
	vec3 all_spec = vec3(0.0,0.0,0.0);

	light += getSunLight(N,rnd);
	all_lights += light;
	
	if(use_spec)
	{
		if(light.r > 0.01 || light.g > 0.01 || light.b > 0.01)
			all_spec += getSunSpec(refn) * light;
	}
	
	for(int i = 0; i < no_lights; i++) {
		if(i < in_no_lights){
			if(lightStructs[i].actve == true)
			{
				//all_lights += vec3(0.3,0,0);
				light = getlight(N,i,rnd);
				all_lights += light;
				if(use_spec)
				{
					if(light.r > 0.01 || light.g > 0.01 || light.b > 0.01)
						all_spec += getspec(refn,i) * light;
				}
			}
		}
	}
	
	if(use_spec){	
		if(spec_a_base)
			all_spec *= base.a;
			
		if(spec_a_normal)
			all_spec *= NTexValue.a;
			
		if(in_speccolor != vec3(0.0,0.0,0.0))
			all_spec *= in_speccolor;
	}