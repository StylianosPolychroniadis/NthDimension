#variables
const int no_bones = 64;
uniform int uni_no_bones;

in float in_weight_0;
in float in_weight_1;
in float in_weight_2;
in float in_joint_0;
in float in_joint_1;
in float in_joint_2;

out vec3 heat;

uniform mat4 bone_matrix[no_bones];
#functions
vec3 boneWeights()
{
	int pos = 6;
	
	vec3 boneheat = vec3(0.0,0.0,0.0);
	
	int int_joint_0 = int(in_joint_0);
	int int_joint_1 = int(in_joint_1);
	int int_joint_2 = int(in_joint_2);

	if(int_joint_0 != 0)
		boneheat[int_joint_0-1-pos] = in_weight_0;
	if(int_joint_1 != 0)
		boneheat[int_joint_1-1-pos] = in_weight_1;
	if(int_joint_2 != 0)
		boneheat[int_joint_2-1-pos] = in_weight_2;
		
	return boneheat;
}
#code
	//heat = boneWeights();
	vec3 ani_position = vec3(0.0,0.0,0.0);
	
	vec3 ani_normal = vec3(0.0,0.0,0.0);
	vec3 ani_tangent = vec3(0.0,0.0,0.0);
	
	int int_joint_0 = int(in_joint_0);
	int int_joint_1 = int(in_joint_1);
	int int_joint_2 = int(in_joint_2);
	
	ani_position += (bone_matrix[int_joint_0-1] * vec4(in_position, 1)).xyz * in_weight_0;
		
	ani_position += (bone_matrix[int_joint_1-1] * vec4(in_position, 1)).xyz * in_weight_1;

	ani_position += (bone_matrix[int_joint_2-1] * vec4(in_position, 1)).xyz * in_weight_2;

